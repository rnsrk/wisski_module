<?php

function wisski_core_update_8001(&$sandbox) {

  $tables = array('wisski_entity_map', 'wisski_title_n_grams', 'wisski_calling_bundles', 'wisski_preview_images', 'wisski_entity_field_properties', 'wisski_core_ontology_namespaces');

  foreach($tables as $table) {
    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
    $result = \Drupal::database()->select($table, 't')->fields('t')->execute();
    file_put_contents('temporary://' . $table, "");
    while($thing = $result->fetch()) {
      file_put_contents('temporary://' . $table, serialize($thing) . "\n", FILE_APPEND);
    }
  }

  drupal_uninstall_schema('wisski_core');
  drupal_install_schema('wisski_core');

  foreach($tables as $table) {
    $file = fopen('temporary://' . $table, "r");
    if ($file) {
      while (($line = fgets($file)) !== false) {
	$thing = unserialize($line);
	$thing = (array)$thing;
        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
        \Drupal::database()->insert($table)->fields($thing)->execute();
#	dpm($line);
      }
    } else {
      \Drupal::messenger()->addError("Could not open file " . $table);
    } 
    fclose($file);
  }
  
}

/**
 * Add Wisski menu
 */
function wisski_core_update_8002() {
  // Create a new menu item.
  $menu = \Drupal::entityTypeManager()->getStorage('menu');
  $menu->create([
    'id' => 'wisski',
    'label' => 'WissKI Menu',
    'description' => 'Links related to the WissKI module.',
    'langcode' => 'en',
    'locked' => true,
    'dependencies' => [ 'enforced' => [ 'module' => [ 'wisski_core' ] ] ],
  ])->save();

}

/**
 * Update the entity definitions
 */
function wisski_core_update_8003() {
  try {
    # \Drupal::entityDefinitionUpdateManager()->applyUpdates();

    $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();

    $field_storage = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('wisski_individual');

    $entity_definition_update_manager->updateFieldableEntityType(\Drupal::entityTypeManager()->getDefinition('wisski_individual'), $field_storage);

  }
  catch (EntityStorageException $e) {
    print_r($e);
  }
}

/** language and content entity updates
  *
  */
function wisski_core_update_8004() {
  try {
    # \Drupal::entityDefinitionUpdateManager()->applyUpdates();

    $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();

    $field_storage = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('wisski_individual');

    $entity_definition_update_manager->updateFieldableEntityType(\Drupal::entityTypeManager()->getDefinition('wisski_individual'), $field_storage);
#    drupal_set_installed_schema_version('wisski_core', '8007');
  }
  catch (EntityStorageException $e) {
    print_r($e);
  }
#  drupal_set_installed_schema_version('wisski_core', '8007');
}

/** translation table updates
  *
  */
function wisski_core_update_8005(&$sandbox) {

  $tables = array('wisski_entity_map', 'wisski_title_n_grams', 'wisski_calling_bundles', 'wisski_preview_images', 'wisski_entity_field_properties', 'wisski_core_ontology_namespaces');

  foreach($tables as $table) {
    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
    $result = \Drupal::database()->select($table, 't')->fields('t')->execute();
    file_put_contents('temporary://' . $table, "");
    while($thing = $result->fetch()) {
      file_put_contents('temporary://' . $table, serialize($thing) . "\n", FILE_APPEND);
    }
  }

  drupal_uninstall_schema('wisski_core');
  drupal_install_schema('wisski_core');

  foreach($tables as $table) {
    $file = fopen('temporary://' . $table, "r");
    if ($file) {
      while (($line = fgets($file)) !== false) {
	$thing = unserialize($line);
	$thing = (array)$thing;
        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
        // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
        \Drupal::database()->insert($table)->fields($thing)->execute();
#	dpm($line);
      }
    } else {
      \Drupal::messenger()->addError("Could not open file " . $table);
    } 
    fclose($file);
  }
  
}

/** Add entity id to triplestore 
  *
  */
function wisski_core_update_8006(&$sandbox) {
  $val = \Drupal::state()->get('wisski_update_last_key');
  if(empty($val))
    $val = 0;

  $result = \Drupal::database()->select("wisski_salz_id2uri", 't')->fields('t')->condition('eid', $val, '>')->orderBy('eid', 'ASC')->execute();
  $adapters = array();

  while($thing = $result->fetchObject()) {
    $adapter_id = $thing->adapter_id;
    $adapter = NULL;
    $eid = $thing->eid;
    $uri = $thing->uri;

    // if there is nothing to do, skip it.
    if(empty($eid) || empty($uri))
      continue;

    if(!isset($adapters[$adapter_id])) {
      $adapter = \Drupal::service('entity_type.manager')->getStorage('wisski_salz_adapter')->load($adapter_id);
      $adapters[$adapter_id] = $adapter;
    } else
      $adapter = $adapters[$adapter_id];

    if($adapter)
      $adapter->getEngine()->setBaseFieldFromStoreForUri($uri, "eid", $eid);
    \Drupal::state()->set('wisski_update_last_key',$eid);
  }
  \Drupal::state()->delete('wisski_update_last_key');
//  drupal_set_installed_schema_version('wisski_core', '8006');
}

/** Add wisski uri field to entity 
  *
  */
function wisski_core_update_8007(&$sandbox) {
  $definition_manager = \Drupal::entityDefinitionUpdateManager();
  $newStorage = Drupal\Core\Field\BaseFieldDefinition::create('uri')
      ->setLabel(t('WissKI URI'))
      ->setDescription(t('The WissKI URI from the TS (in case you need it)'))
      ->setReadOnly(TRUE)
      ->setDisplayOptions('view', array(
        'region' => 'hidden',
        'label' => 'hidden',
        'type' => 'string',
        'weight' => -5,
      ))
      ->setDisplayConfigurable('view', TRUE);

  $definition_manager->installFieldStorageDefinition('wisski_uri','wisski_individual', 'wisski_core', $newStorage);
}

/** Update language in entity field properties table 
  *
  */
function wisski_core_update_8008(&$sandbox) {
  $lang = \Drupal::service('language_manager')->getCurrentLanguage()->getId();

  $result = \Drupal::database()->update("wisski_entity_field_properties")->fields(['lang' => $lang])->condition('lang', 'und', '=')->execute();
//  UPDATE `wisski_entity_field_properties` SET `lang` = 'en' WHERE `lang` = 'und'

}

/**
 * implements hook_schema()
 */
function wisski_core_schema() {

  $schema['wisski_entity_map'] = array(
    'description' => 'generates a serial number for those entity IDs which have a generated title',
    'fields' => array(
      'num' => array(
        'description' => 'the Serial Number for the generated title',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'the Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('num'),
  );

  $schema['wisski_title_n_grams'] = array(
    
    'description' => 'Stores n-grams of generated entity titles for search and index purposes',
    'fields' => array(
      'ent_num' => array(
        'description' => 'Entity Serial Number from wisski_entity_map',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'Bundle Name',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'default',
      ),
      'ngram' => array(
        'description' => 'n-gram from the title',
        'type' => 'char',
        'length' => 128,
        'not null' => TRUE,
      ),
      'n' => array(
        'description' => 'the length of the n-gram',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'lang' => array(
        'description' => 'the language of the title',
        'type' => 'char',
        'length' => 16,
        'not null' => TRUE,
	'default' => 'und',
      ),
    ),
    'primary key' => array('ent_num','bundle','ngram','lang'),
    'indexes' => array(
      'ngrams' => array('ngram','n','lang'),
      'entities' => array('ent_num','bundle','lang'),
    ),
  );
  
  $schema['wisski_calling_bundles'] = array(
    
    'description' => 'Caches the calling bundle for individuals so that we can decide on the correct visualization',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bid' => array(
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('bid',64)),
    ),
  );
  
  $schema['wisski_preview_images'] = array(
    
    'description' => 'Caches the URI of the preview image for individuals',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'image_uri' => array(
        'description' => 'image URI',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('image_uri',128)),
    ),
  );
  
  $schema['wisski_entity_field_properties'] = array(
  
    'description' => 'Saves secondary field data for WissKI Entities. This includes all the field properties that are set by the user',
    'fields' => array(
      'eid' => array(
        'description' => 'Entity ID',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'bid' => array(
        'description' => 'bundle name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'field name / ID',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'delta' => array(
        'description' => 'field item weight',
        'type' => 'int',
      ),
      'ident' => array(
        'description' => 'A string that identifies this field item, will mostly be the disamb/group URI',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ),
      'properties' => array(
        'description' => 'array of field properties',
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'lang' => array(
        'description' => 'the language of the field property table entry',
        'type' => 'char',
        'length' => 16,
        'not null' => TRUE,
	'default' => \Drupal::service('language_manager')->getCurrentLanguage()->getId(),
      ),
    ),
    'indexes' => array(
      'eid' => array('eid'),
      'bid' => array(array('bid',64)),
      'fid' => array(array('fid',64)),
    ),
  );

  $schema['wisski_core_ontology_namespaces'] = array(
  
    'description' => 'Saves the namespaces on ontology load.',
    'fields' => array(
      'short_name' => array(
        'description' => 'Short name of the namespace.',
        'type' => 'varchar',
        'length' => 1023,
        'not null' => TRUE,
      ),
      'long_name' => array(
        'description' => 'Full URI of the namespace.',
        'type' => 'text',
        'length' => 1023,
        'not null' => TRUE,
      ),
    ),
  );
  
  //dpm($schema);
  return $schema;
}
