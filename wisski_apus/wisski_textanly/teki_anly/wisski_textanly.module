<?php

/** @author Martin Scholz, unless otherwise noted */



/**
* @author Martin Scholz
*/
function wisski_textanly_menu () {

  $items = array();
  $items['wisski/textanly/analyse'] = array (
    'title' => '',
    'page callback' => 'wisski_textanly_ajax_analyse',
    'type' => MENU_CALLBACK,
    'access arguments' => array('wisski use editor'),
  );
  /* admin settings */
  $items['admin/settings/wisski/text/anly'] = array(
    'title' => 'Automatic text analysis',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_textanly_admin_list'),
    'access arguments' => array('wisski administrate page'),
    'file' => 'wisski_textanly.admin.inc',
  );
  $items['admin/settings/wisski/text/anly/%/add'] = array(
    'title' => 'Add Analyser',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_textanly_admin_edit', NULL, 5),
    'access arguments' => array('wisski administrate page'),
    'file' => 'wisski_textanly.admin.inc',
  );
  $items['admin/settings/wisski/text/anly/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_textanly_admin_edit', 5),
    'access arguments' => array('wisski administrate page'),
    'file' => 'wisski_textanly.admin.inc',
  );
  $items['admin/settings/wisski/text/anly/%/clone'] = array(
    'title' => 'Edit',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_textanly_admin_edit', 5, '', TRUE),
    'access arguments' => array('wisski administrate page'),
    'file' => 'wisski_textanly.admin.inc',
  );
  $items['admin/settings/wisski/text/anly/%/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'wisski_textanly_admin_delete',
    'page arguments' => array(5),
    'access arguments' => array('wisski administrate page'),
    'file' => 'wisski_textanly.admin.inc',
  );
  $items['admin/settings/wisski/text/anly/test'] = array(
    'title' => 'Text Analysis Test Page',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_textanly_test_page'),
    'access arguments' => array('wisski administrate page'),
  );
  $items['wisski/textanly/log'] = array(
    'title' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'wisski_textanly_ajax_log',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['wisski/textanly/showlog/%'] = array(
    'title' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'wisski_textanly_html_log',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  return $items;

}



/** Get a information about available analysis component types.
* This calls hook_wisski_textanly()
*
* @return if $type and $col is set, the value of key $col for type $type.
*   If only $type is set, return all info about type $type.
*   If $type is NULL, return info about all available types.
*
* @author Martin Scholz
*/
function wisski_textanly_get_types($type = NULL, $col = NULL) {
  static $types = array();

  if (!$types) {
    foreach (module_implements('wisski_textanly') as $module) {
      foreach (module_invoke($module, 'wisski_textanly', 'list') as $t => $info) {
        $info['module'] = $module;
        $info['id'] = $t;
        $types[$t] = $info;
      }
    }
  }

  if (!$type) {
    return $types;
  } elseif (!isset($types[$type])) {
    return NULL;
  } elseif (!$col) {
    return $types[$type];
  } else {
    return $types[$type][$col];
  }

}

/** Get one or multiple analysers from db
*
* @return If $aid and $col is set, the value of key $col for analyser with id $aid.
*   If only $aid is set, return analyser with id $aid.
*   If $aid is NULL, return all analysers sorted by weight.
*
* @author Martin Scholz
*
*/
function wisski_textanly_get($aid = NULL, $col = NULL, $refresh = FALSE) {
  static $aps = array();
  static $all = FALSE;

  if ($reload) {
    $aps = array();
    $all = FALSE;
  }

  if (!$all && (!$aid || !isset($aps[$aid]))) {
    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
    $rows = \Drupal::database()->query('SELECT * FROM {wisski_textanly_analyser}' . ((!$aid) ? ' ORDER BY weight ASC' : ' WHERE aid = %d'), $aid);
    while (TRUE) {
      $ap = db_fetch_object($rows);
      if (!$ap) break;
      $ap->settings = unserialize($ap->settings);
      $aps[$ap->aid] = $ap;
    }
    if (!$aid) $all = TRUE;
  }

  if (!$aid) {
    return $aps;
  } elseif (!isset($aps[$aid])) {
    return NULL;
  } elseif (!$col) {
    return $aps[$aid];
  } elseif (!isset($aps[$aid]->$col)) {
    return NULL;
  } else {
    return $aps[$aid]->$col;
  }

}


/** Save analyser to db
* $ap may be changed, e.g. an id may be added
*
* @author Martin Scholz
*/
function wisski_textanly_save(&$ap) {
  
  if ($ap->aid) {
    // update
    drupal_write_record('wisski_textanly_analyser', $ap, 'aid');
  } else {
    // insert
    drupal_write_record('wisski_textanly_analyser', $ap);
  }

}

/** delete a step object
*
* @author Martin Scholz
*/
function wisski_textanly_delete($aid) {
  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
  \Drupal::database()->query('DELETE FROM {wisski_textanly_analyser} WHERE aid = %d', $aid);
  return TRUE;
}


/** Implementation of hook_wisski_textanly
*
* With this hook modules can provide their own analysis component types.
*
* @parameter $op Operation may be
* - list: get a list of defined types with info.
* - analyse: analyse a piece of text
* - operations: list available admin operations (for display in the admin list tab)
* - edit: the form for adding/editing a step
* - validate: validate the edit form
* - submit: submit the edit form
*
* @parameter $ap the analysis step object; ignorable when $op is 'list'
*
* The other parameters depend on $op:
* - list: no params
* - analyse:
*   - $type: the step type
*   - $profile: the profile to be applied
*   - $lang: the text language
*   - $text: the text to be analysed
*   - $tokens: the text as sequence of tokens
*     Tokens are arrays of form
*     array(<surface>, <start pos>, <end pos>)
*     Keys 'lemma' and 'pos' may be set
*     if a lemma and part-of-speech info is available.
*   - $annos: already set/found annotations
*   - $settings: settings for the step
*   - $ticket: a unique ticket for the analysis process.
*     May be used by components to pass through extra data.
* - operations, edit, validate, submit:
*   - $ap: the step object
*
* @return depends on $op
* - list: get a list of defined types with info.
*   keys are type id, the value is an info array that contains
*   - title: the label of the type
*   - description: a description of the type
*   - langs: a list of languages this component type may be applied to.
*     A single entry '' means all languages.
* - analyse: an array of annotations
* - operations: an assoc array of admin operations for this type mapped to
*   their URL callbacks
* - edit: the form array
* - validate, submit: nothing
*
* @author Martin Scholz
*/
function wisski_textanly_wisski_textanly($op, $ap = NULL, $text_struct = NULL, $ticket = NULL) {

  switch ($op) {
    case 'list':
      return array(
        'wisski_textanly_anno_ids' => array(
          'title' => t('Annotation IDs'),
          'description' => t('Adds IDs to annotations where missing and sorts annos by ID'),
          'langs' => array(''),
        ),
        'wisski_textanly_datetime' => array(
          'title' => t('Dates & Times'),
          'description' => t('Detection of statements about temporal location'),
          'langs' => array('de', 'en'),
        ),
        'wisski_textanly_filter' => array(
          'title' => t('Filter Annotations'),
          'description' => t('Filter annotations by rank or eliminate overlapping annotations'),
          'langs' => array(''),
        ),
        'wisski_textanly_mw_automaton' => array(
          'title' => t('Multiword pattern'),
          'description' => t('Detection of multi-word patterns, e.g. complex organisation names'),
          'langs' => array(''),
        ),
        'wisski_textanly_person' => array(
          'title' => t('Person detection'),
          'description' => t('Lexicon-based detection of person names and enrichment of person annotations with gender and name information'),
          'langs' => array(''),
        ),
        'wisski_textanly_regexp' => array(
          'title' => t('Regular Expression Pattern'),
          'description' => t('Detection of patterns withs regular expressions'),
          'langs' => array(''),
        ),
        'wisski_textanly_rerank' => array(
          'title' => t('Rerank Annotations'),
          'description' => t('Rerank annotations overlapping with annotations of the same type'),
          'langs' => array(''),
        ),
        'wisski_textanly_sentence_splitter' => array(
          'title' => t('Sentence splitter'),
          'description' => t('Splits sentences based on POS tags'),
          'langs' => array(''),
        ),
        'wisski_textanly_set_lang' => array(
          'title' => t('Set Language'),
          'description' => t('Set the default language'),
          'langs' => array(''),
        ),
        'wisski_textanly_tokenizer' => array(
          'title' => t('Basic Tokenizer'),
          'description' => t('Tokenizes plain text'),
          'langs' => array(''),
        ),
        'wisski_textanly_vocab' => array(
          'title' => t('Vocabulary Entries'),
          'description' => t('Detection of mentions of vocabulary entries'),
          'langs' => array(''),
        ),
        'wisski_textanly_xhtml' => array(
          'title' => t('WissKI XHTML'),
          'description' => t('Meta-Analyser for texts in WissKI XHTML format'),
          'langs' => array(''),
        ),
      );

    case 'analyse':
      
      $id = substr($ap->type, 16);

      include_once(dirname(__FILE__) . '/wisski_textanly.analyse.' . $id . '.inc');
      return call_user_func("wisski_textanly_analyse_$id", $ap, $text_struct, $ticket);
      
    default:
	
      $id = substr($ap->type, 16);
      
      include_once(dirname(__FILE__) . '/wisski_textanly.analyse.' . $id . '.inc');
	  	if (function_exists("wisski_textanly_admin_analyse_$id")) {
  		  return call_user_func_array("wisski_textanly_admin_analyse_$id", func_get_args());
	  	} else {
		    return NULL;
		  }

  }

}



function wisski_textanly_anno_cats() {
  $cats = variable_get('wisski_textanly_anno_cats', array('actor', 'person', 'event', 'pthing', 'cthing', 'place', 'time', 'type'));
  if (empty($cats)) return $cats;
  return array_combine($cats, $cats);
}



/** hook_theme implementation for theming the table in admin list tab
*
* @author Florian Wittmann
*/
function wisski_textanly_theme() {
  return array(
    'wisski_textanly_profile_table' => array(
      'file' => 'wisski_textanly.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}



function wisski_textanly_analyse($profile, $text_struct, $ticket = NULL) {

  if ($ticket === NULL) $ticket = wisski_get_uuid(4);

  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
  $rows = \Drupal::database()->query("SELECT * FROM {wisski_textanly_analyser} WHERE profile = '%s' ORDER BY weight ASC", $profile);
  
  wisski_textanly_log($ticket, $text_struct, 'dbg');
  while ($analyser = db_fetch_object($rows)) {
    $analyser->settings = unserialize($analyser->settings);
    // run analyser
    wisski_textanly_log($ticket, t('Running analyser !a.', array('!a' => $analyser->name)));
    $text_struct = module_invoke($analyser->module, 'wisski_textanly', 'analyse', $analyser, $text_struct, $ticket);
    wisski_textanly_log($ticket, $text_struct, 'dbg');
  }

  return $text_struct;

}


function wisski_textanly_log($ticket, $msg = NULL, $level = 'info') {
  $args = func_get_args();
  if ($level != 'info' && $level != 'dbg' && $level != 'err' && $level != 'warn') {
    \Drupal::messenger()->addError(t("Bad log level: '%l'", array('%l' => $level)));
    return;
  }

  $cache = cache_get("wisski_textanly_log_$ticket", 'cache');
  if (empty($cache)) $cache = array();
  else $cache = $cache->data;

  if (count($args) > 1) $cache[] = array(time(), $level, $msg);

  cache_set("wisski_textanly_log_$ticket", $cache, 'cache', CACHE_TEMPORARY);

  return $cache;

}


/* implementation of hook_wysiwyg_plugin
* Provide information about plugins
*
* @author Martin Scholz
*
*/
function wisski_textanly_wysiwyg_plugin($editor, $version) {
  if ($editor != 'tinymce') return;

  global $base_root, $base_path;

  $plugins = array(
    // sends the text to server and retrieves automatically generated annotations 
    'wisskiTextAnly' => array(
      'path' => drupal_get_path('module', 'wisski_textanly') . '/tinymce_plugin.js',
      'buttons' => array(
        'wisskiTextAnlyAuto' => t('Wisski Toggle Periodic Analysis'),
        'wisskiTextAnlyManual' => t('Wisski Analyse (Manual trigger)'),
        'wisskiTextAnlyLog' => t('Wisski Show last analysis log'),
      ),
      'options' => array(
        'wisski_textanly_profile' => variable_get('wisski_textanly_profile', array('default' => 'default')),
        'wisski_textanly_autosend' => variable_get('wisski_textanly_autosend', FALSE) ? 'true' : 'false',
        'wisski_textanly_autosend_interval' => variable_get('wisski_textanly_send_interval', 5000),
        'wisski_textanly_url' => $base_root . $base_path . 'wisski/textanly/analyse',
        'wisski_textanly_log_url' => $base_root . $base_path . 'wisski/textanly/log',
        ),
      'load' => TRUE,
    ),
  );

  return $plugins;
}



/** 
*
* @author Martin Scholz
*
*/
function wisski_textanly_test_page() {
  
  $form['text'] = array(
    '#type' => 'textarea',
    '#title' => t('Text'),
    '#attributes' => array('id' => 'analyse_text'),
  );
  $form['profile'] = array(
    '#type' => 'select',
    '#title' => t('Profile'),
    '#options' => variable_get('wisski_textanly_profiles', array('default')),
    '#default_value' => 'default',
    '#attributes' => array('id' => 'analyse_profile'),
  );
  $form['analyse'] = array(
    '#type' => 'markup',
    '#value' => t('Analyse'),
    '#prefix' => '<p><a id="analyse_do" href="#">',
    '#suffix' => '</a></p>',
  );
  $form['result'] = array(
    '#type' => 'fieldset',
    '#title' => t('Result'),
  );
  $form['result']['value'] = array(
    '#value' => '<div><pre id="analyse_result" class="json_dump"></pre></div>',
  );
  $form['logs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logs'),
  );
  $form['logs']['value'] = array(
    '#value' => '<div><pre id="analyse_log" class="json_dump"></pre></div>',
  );

  drupal_add_js(drupal_get_path('module', 'wisski_textanly') . '/test_page.js', 'module', 'footer');
  drupal_add_css(drupal_get_path('module', 'wisski_textanly') . '/test_page.css', 'module');
 
  return $form;
}




/** Web service callback: Analyse a text and return a json object
* containing proposed annotations.
*
* Supports parameters in $q. All are optional but 'text'.
*
* @author Martin Scholz
*
*/
function wisski_textanly_ajax_analyse() {
  
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  
  // we use the textedit module to read the post parameters
  $q = (object) array('ticket' => NULL, 'text' => NULL, 'annos' => array(), 'profile' => 'default', 'annos_only' => TRUE);
  wisski_parse_http_params($q, "text_struct");
  
  if ($q->text === NULL) {
    // found no text parameter
    drupal_set_header('HTTP/1.1 400 Bad Request');
    print json_encode(array("error" => "no text to analyse"));
    return;    
  }
  
  $text_struct = array(
    'text' => $q->text,
    'annos' => $q->annos,
  );
  $ticket = empty($q->ticket) ? wisski_get_uuid(4) : $q->ticket;
  wisski_textanly_log($ticket, 'Text from test page. Starting analysis...', 'dbg');
  $text_struct = wisski_textanly_analyse($q->profile, $text_struct, $ticket);
  
  // Print result
  $json = array('ticket' => $ticket);
  if ($q->annos_only) $json["annos"] = $text_struct['annos'];
  else $json["text_struct"] = $text_struct;

  print json_encode($json);
  exit();
  
}


/** Web service callback: Return the logs of an analysis as a json object
*
* Supported parameters in $q are 'ticket' (mandatory) and 'logs' (optional).
* The latter is an array of log levels to return. By default only returns info level.
*
* @author Martin Scholz
*
*/
function wisski_textanly_ajax_log() {

  drupal_set_header('Content-Type: application/json; charset=utf-8');
  
  // we use the textedit module to read the post parameters
  $q = (object) array('ticket' => NULL, 'levels' => array('info'));
  wisski_parse_http_params($q, "log");
  
  $ticket = $q->ticket;
  if ($ticket === NULL) {
    // found no text parameter
    drupal_set_header('HTTP/1.1 400 Bad Request');
    print json_encode(array("error" => "no ticket specified"));
    return;    
  }

  $json = array('ticket' => $ticket);
  if (!empty($q->levels) && is_array($q->levels)) {
    $cache = cache_get("wisski_textanly_log_$ticket", 'cache');
    if (isset($cache->data)) {
      foreach ($cache->data as $log) 
        if (in_array($log[1], $q->levels)) $json['logs'][] = $log;
    }
  }

  print json_encode($json);
  return;
  
}




/** Web service callback: Return the logs of an analysis as a json object
*
* Supported parameters in $q are 'ticket' (mandatory) and 'logs' (optional).
* The latter is an array of log levels to return. By default only returns info level.
*
* @author Martin Scholz
*
*/
function wisski_textanly_html_log($ticket) {

  if ($ticket === NULL) {
    // found no text parameter
    drupal_set_header('HTTP/1.1 400 Bad Request');
    return "no ticket specified";
  }
  
  drupal_add_js(drupal_get_path('module', 'wisski_textanly') . '/test_page.js', 'module', 'footer');
  drupal_add_css(drupal_get_path('module', 'wisski_textanly') . '/test_page.css', 'module');
  
  $script = "WissKI.textanly.getLogs('$ticket');";
  drupal_add_js($script,  'inline', 'footer');

  return '<pre id="analyse_log" class="json_dump"></pre>';
  
}


